/* eslint-disable */
// auth-service v0.0.1 795009cb00e7f8140159fb31d65a5c1e60a85dd7
// --
// Code generated by webrpc-gen@v0.11.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=rpc.ridl -target=typescript -client -out=/Users/alberthuang/code/sodium/lib/auth/rpc.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "795009cb00e7f8140159fb31d65a5c1e60a85dd7"

//
// Types
//


export interface AuthSessionRequestWithGoogle {
  authToken: string
  isSafe: boolean
  sessionKey: string
  deviceInfo: string
  deviceId: string
}

export interface AuthSessionRequestWithTwitter {
  oauth2code: string
  isSafe: boolean
  redirectURI: string
  codeVerifier: string
  sessionKey: string
}

export interface Account {
  id: string
  salt: string
}

export interface AuthSession {
  sessionKey: string
  sessionUniqueId: string
  sessionExpires: number
}

export interface AuthSessionResponse {
  authId: string
  authProvider: string
  authSessionProof: string
  authSession: AuthSession
  account: Account
  displayName: string
}

export interface PreAuthRequest {
  authHash: string
  sessionKey: string
  authSignature: string
}

export interface AuthURLRequest {
  oauthCallback: string
}

export interface Session {
  sessionKey: string
  sessionExpires: number
  deviceInfo: string
  lastSeen: number
}

export interface AuthService {
  authSessionWithGoogle(args: AuthSessionWithGoogleArgs, headers?: object): Promise<AuthSessionWithGoogleReturn>
  preAuth(args: PreAuthArgs, headers?: object): Promise<PreAuthReturn>
  fetchSessions(args: FetchSessionsArgs, headers?: object): Promise<FetchSessionsReturn>
  checkSessionKey(args: CheckSessionKeyArgs, headers?: object): Promise<CheckSessionKeyReturn>
  removeSession(args: RemoveSessionArgs, headers?: object): Promise<RemoveSessionReturn>
  ping(headers?: object): Promise<PingReturn>
}

export interface AuthSessionWithGoogleArgs {
  request: AuthSessionRequestWithGoogle
}

export interface AuthSessionWithGoogleReturn {
  response: AuthSessionResponse  
}
export interface PreAuthArgs {
  request: PreAuthRequest
}

export interface PreAuthReturn {  
}
export interface FetchSessionsArgs {
  accountId: string
}

export interface FetchSessionsReturn {
  sessions: Array<Session>  
}
export interface CheckSessionKeyArgs {
  accountId: string
  sessionKey: string
}

export interface CheckSessionKeyReturn {
  valid: boolean  
}
export interface RemoveSessionArgs {
  accountId: string
  sessionKey: string
  sig: string
}

export interface RemoveSessionReturn {  
}
export interface PingArgs {
}

export interface PingReturn {  
}


  
//
// Client
//
export class AuthService implements AuthService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/AuthService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  authSessionWithGoogle = (args: AuthSessionWithGoogleArgs, headers?: object): Promise<AuthSessionWithGoogleReturn> => {
    return this.fetch(
      this.url('AuthSessionWithGoogle'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          response: <AuthSessionResponse>(_data.response),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  preAuth = (args: PreAuthArgs, headers?: object): Promise<PreAuthReturn> => {
    return this.fetch(
      this.url('PreAuth'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  fetchSessions = (args: FetchSessionsArgs, headers?: object): Promise<FetchSessionsReturn> => {
    return this.fetch(
      this.url('FetchSessions'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          sessions: <Array<Session>>(_data.sessions),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  checkSessionKey = (args: CheckSessionKeyArgs, headers?: object): Promise<CheckSessionKeyReturn> => {
    return this.fetch(
      this.url('CheckSessionKey'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          valid: <boolean>(_data.valid),
        }
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  removeSession = (args: RemoveSessionArgs, headers?: object): Promise<RemoveSessionReturn> => {
    return this.fetch(
      this.url('RemoveSession'),
      createHTTPRequest(args, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  
}

  const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(error) {
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${error.message || ''}: response text: ${text}`},
      )
    }
    if (!res.ok) {
      const code: number = (typeof data.code === 'number') ? data.code : 0
      throw (webrpcErrorByCode[code] || WebrpcError).new(data)
    }
    return data
  })
}

//
// Errors
//

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  status: number
  cause?: string

  /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
  msg: string

  constructor(name: string, code: number, message: string, status: number, cause?: string) {
    super(message)
    this.name = name || 'WebrpcError'
    this.code = typeof code === 'number' ? code : 0
    this.message = message || `endpoint error ${this.code}`
    this.msg = this.message
    this.status = typeof status === 'number' ? status : 0
    this.cause = cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static new(payload: any): WebrpcError {
    return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause)
  }
}

// Webrpc errors

export class WebrpcEndpointError extends WebrpcError {
  constructor(
    name: string = 'WebrpcEndpoint',
    code: number = 0,
    message: string = 'endpoint error',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype)
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(
    name: string = 'WebrpcRequestFailed',
    code: number = -1,
    message: string = 'request failed',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype)
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadRoute',
    code: number = -2,
    message: string = 'bad route',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype)
  }
}

export class WebrpcBadMethodError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadMethod',
    code: number = -3,
    message: string = 'bad method',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype)
  }
}

export class WebrpcBadRequestError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadRequest',
    code: number = -4,
    message: string = 'bad request',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype)
  }
}

export class WebrpcBadResponseError extends WebrpcError {
  constructor(
    name: string = 'WebrpcBadResponse',
    code: number = -5,
    message: string = 'bad response',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype)
  }
}

export class WebrpcServerPanicError extends WebrpcError {
  constructor(
    name: string = 'WebrpcServerPanic',
    code: number = -6,
    message: string = 'server panic',
    status: number = 0,
    cause?: string
  ) {
    super(name, code, message, status, cause)
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype)
  }
}


// Schema errors


export enum errors {
  WebrpcEndpoint = 'WebrpcEndpoint',
  WebrpcRequestFailed = 'WebrpcRequestFailed',
  WebrpcBadRoute = 'WebrpcBadRoute',
  WebrpcBadMethod = 'WebrpcBadMethod',
  WebrpcBadRequest = 'WebrpcBadRequest',
  WebrpcBadResponse = 'WebrpcBadResponse',
  WebrpcServerPanic = 'WebrpcServerPanic',
}

const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
