/* eslint-disable */
// wyre-service v0.0.1 07a8a489f5abe19955ea4020ab1cab63c75a1b2a
// --
// Code generated by webrpc-gen@v0.9.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=rpc.ridl -target=typescript -client -out=/Users/alberthuang/code/sodium/lib/wyre.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "07a8a489f5abe19955ea4020ab1cab63c75a1b2a"

//
// Types
//


export interface GetWyreDepositCurrenciesQuery {
  networkId: string
}

export interface AbstractTokenInfo {
  name: string
  icon: string
}

export interface RequestWyreDepositRequest {
  amount: number
  walletAddress: string
  sourceCurrency: string
  destCurrency: string
  networkId: string
}

export interface PreReserveResponse {
  fees: { [key: string]: number }
  exchangeRate: number
  destAmount: number
}

export interface WyreService {
  ping(headers?: object): Promise<PingReturn>
  getWyreDepositCurrencies(headers?: object): Promise<GetWyreDepositCurrenciesReturn>
  requestWyrePreDeposit(args: RequestWyrePreDepositArgs, headers?: object): Promise<RequestWyrePreDepositReturn>
  requestWyreDeposit(args: RequestWyreDepositArgs, headers?: object): Promise<RequestWyreDepositReturn>
}

export interface PingArgs {
}

export interface PingReturn {
}
export interface GetWyreDepositCurrenciesArgs {
}

export interface GetWyreDepositCurrenciesReturn {
  receiveCurrencies: Array<AbstractTokenInfo>
  canBuyTokens: Array<AbstractTokenInfo>
}
export interface RequestWyrePreDepositArgs {
  request: RequestWyreDepositRequest
}

export interface RequestWyrePreDepositReturn {
  response: PreReserveResponse
}
export interface RequestWyreDepositArgs {
  request: RequestWyreDepositRequest
}

export interface RequestWyreDepositReturn {
  deposit: string
}



//
// Client
//
export class WyreService implements WyreService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/WyreService/'
  private static _instance: WyreService;
  public static get instance() {
    if (WyreService._instance == null) {
      WyreService._instance = new WyreService("https://wyre-server.melandworld.com", global.fetch);
    }
    return WyreService._instance;
  }

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }

  getWyreDepositCurrencies = (headers?: object): Promise<GetWyreDepositCurrenciesReturn> => {
    return this.fetch(
      this.url('GetWyreDepositCurrencies'),
      createHTTPRequest({}, headers)
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          receiveCurrencies: <Array<AbstractTokenInfo>>(_data.receiveCurrencies),
          canBuyTokens: <Array<AbstractTokenInfo>>(_data.canBuyTokens)
        }
      })
    })
  }

  requestWyrePreDeposit = (args: RequestWyrePreDepositArgs, headers?: object): Promise<RequestWyrePreDepositReturn> => {
    return this.fetch(
      this.url('RequestWyrePreDeposit'),
      createHTTPRequest(args, headers)).then((res) => {
        return buildResponse(res).then(_data => {
          return {
            response: <PreReserveResponse>(_data.response)
          }
        })
      })
  }

  requestWyreDeposit = (args: RequestWyreDepositArgs, headers?: object): Promise<RequestWyreDepositReturn> => {
    return this.fetch(
      this.url('RequestWyreDeposit'),
      createHTTPRequest(args, headers)).then((res) => {
        return buildResponse(res).then(_data => {
          return {
            deposit: <string>(_data.deposit)
          }
        })
      })
  }

}


export interface WebRPCError extends Error {
  code: string
  msg: string
  status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch (err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
