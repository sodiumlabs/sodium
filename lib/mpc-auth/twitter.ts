/* eslint-disable */
// twitter-auth-service v0.0.1 cad32504674081f8d4880937404a43da5787f21d
// --
// Code generated by webrpc-gen@v0.9.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=rpc.ridl -target=typescript -client -out=/Users/alberthuang/code/sodium/lib/auth/twitter.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "cad32504674081f8d4880937404a43da5787f21d"

//
// Types
//


export interface AuthRequest {
  token: string
  verifier: string
  messageHash: string
}

export interface AuthResponse {
  messageHash: string
  signature: string
  authId: string
  email: string
}

export interface AuthURLRequest {
  oauthCallback: string
}

export interface TwitterAuthService {
  auth(args: AuthArgs, headers?: object): Promise<AuthReturn>
  authURL(args: AuthURLArgs, headers?: object): Promise<AuthURLReturn>
}

export interface AuthArgs {
  request: AuthRequest
}

export interface AuthReturn {
  response: AuthResponse  
}
export interface AuthURLArgs {
  request: AuthURLRequest
}

export interface AuthURLReturn {
  authURL: string  
}


  
//
// Client
//
export class TwitterAuthService implements TwitterAuthService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/TwitterAuthService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  auth = (args: AuthArgs, headers?: object): Promise<AuthReturn> => {
    return this.fetch(
      this.url('Auth'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          response: <AuthResponse>(_data.response)
        }
      })
    })
  }
  
  authURL = (args: AuthURLArgs, headers?: object): Promise<AuthURLReturn> => {
    return this.fetch(
      this.url('AuthURL'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          authURL: <string>(_data.authURL)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
